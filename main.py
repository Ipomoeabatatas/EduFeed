import streamlit as st
import openai
import os
import secrets



# Access the key
openai.api_key = st.secrets["OPENAI_KEY"]
response = f"""Watch this space for the AI generated feedback. \n
Click the Generate button on side bar. Be patient. Take 3 breaths.\n """
prompt = "prompt"
# st.write(api_key)

disclaimer = f"""_By using this website, I understand that the content generated by this AI writer is purely based on algorithms and machine learning models, and therefore, the website cannot take any responsibility for its accuracy or completeness. It is my responsibility to use this tool in a responsible and ethical manner, and to ensure that the generated content is thoroughly reviewed and edited before use. I acknowledge that the website cannot be held liable for any consequences arising from the use of the generated content, and that I must use this tool at my own discretion and risk._"""

def get_completion(prompt, model="gpt-3.5-turbo",temperature=0): # Andrew mentioned that the prompt/ completion paradigm is preferable for this class
    messages = [{"role": "user", "content": prompt}]
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=temperature, # this is the degree of randomness of the model's output
    )
    return response.choices[0].message["content"]

@st.cache_data
def generate_prompt(role, tone, words_limit, comments):
    prompt = f"""
You are a {role}. \
Your task is to write feedback for a student. \
Write in a {tone} manner. \
Use your observations as delimited by **. \
The feedback should encourage and guide the student \
towards a better learning outcome. \
Limit the feedback to at most { words_limit} words. \
Exclude any salutation and signing off. End with an emoji. \
Observation: ** {comments} **
"""
    return prompt

st.title("EduFeed\n **Fostering Student Learning with Personalised + AI-Powered Feedback**")
# Sidebar Input Widgets
with st.sidebar:
    st.title("Feedback Writer Settings")
    role = st.selectbox("Select Role", options=["polytechnic lecturer", "university professor", "childcare teacher"])
    tone = st.selectbox("Choose the tone of the your feedback", options=["Encouraging", "Constructive", "Supportive", "Positive", "Neutral"])
    words_limit = st.selectbox("Choose the feedback word counts", options=[50, 80, 100, 160, 200], index=1)
    comments = st.text_area("Write short personalised comments",  value="Volunteer answers \n Incomplete submission \nUse grammar checker \n",  height=50, max_chars=1000)

    if st.button("Generate"):
        prompt = generate_prompt(role, tone, words_limit, comments)
        response = get_completion(prompt)
        st.write('Prompt send to GPT3.5')
        boxed_output = f"<div style='border:1px solid #e6e6e6;padding:10px'>{prompt}</div>"
        st.markdown(boxed_output, unsafe_allow_html=True) 

# Main Body Output Areas

#print ('df')
#@st.cache_data(hash_funcs={str: hash})
#st.title("AI Generated Feedback")

with st.container():
    st.write(disclaimer)

with st.container():
   # st.write(response)

   boxed_output = f"<div style='border:1px solid #e6e6e6;padding:10px'>{response}</div>"
   st.markdown(boxed_output, unsafe_allow_html=True) 
   
#st.text_area("Please use the AI feedback in a responsible manner. ", value=response, key="output", height=80)

